import re

import peewee
from pyrogram import Client, filters
from pyrogram.enums import ChatType
from pyrogram.errors import RPCError
from pyrogram.types import (CallbackQuery, InlineKeyboardButton,
                            InlineKeyboardMarkup, Message)

from log import logger
from initialization import user
from models import Source, Filter, Category
from plugins.bot.menu import custom_filters
from plugins.bot.menu.helpers import buttons
from plugins.bot.menu.helpers.checks import is_admin
from plugins.bot.menu.helpers.links import get_channel_formatted_link
from plugins.bot.menu.helpers.path import Path
from plugins.bot.menu.helpers.senders import send_message_to_admins
from plugins.bot.menu.managers.input_wait import input_wait_manager
from plugins.bot.menu.section_filter import list_types_filters


@Client.on_callback_query(filters.regex(
    r'^/c_\d+/$'))
async def list_source(_, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    category_id = int(path.get_value('c'))
    category_obj: Category = (Category.get(id=category_id)
                              if category_id else None)

    text = (f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{await get_channel_formatted_link(category_obj.tg_id)}**'
            if category_obj else '**–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏**')

    inline_keyboard = []
    if category_obj and is_admin(callback_query.from_user.id):
        inline_keyboard.append([InlineKeyboardButton(
            '‚ûï',
            callback_data=path.add_action('add')
        ), InlineKeyboardButton(
            f'üìù',
            callback_data=path.add_action('edit')
        ), InlineKeyboardButton(
            '‚úñÔ∏è',
            callback_data=path.add_action('delete')
        ), ])
    query = (
        Source
        .select(Source.id, Source.title,
                peewee.fn.Count(Filter.id).alias('count'))
        .where(Source.category == category_id if category_id else True)
        .join(Filter, peewee.JOIN.LEFT_OUTER)
        .group_by(Source.id)
    )
    inline_keyboard += buttons.get_list_model(
        data={item.id: (item.title, item.count) for item in query},
        path=path,
        prefix_path='s',
    ) + buttons.get_fixed(path)

    await callback_query.answer()
    await callback_query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard),
        disable_web_page_preview=True
    )


@Client.on_callback_query(filters.regex(
    r's_\d+/:edit/c_\d+/$') & custom_filters.admin_only)
async def edit_source_category(client: Client, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    source_id = int(path.get_value('s'))
    category_obj: Category = Category.get(id=int(path.get_value('c', after_action=True)))
    source_obj: Source = Source.get(id=source_id)

    q = (Source
         .update({Source.category: category_obj})
         .where(Source.id == source_id))
    q.execute()
    Source.clear_actual_cache()

    callback_query.data = path.get_prev(2)
    await callback_query.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞')
    await list_types_filters(client, callback_query)

    await send_message_to_admins(
        client, callback_query,
        f'–ò–∑–º–µ–Ω–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '
        f'{await get_channel_formatted_link(source_obj.tg_id)} '
        f'–Ω–∞ {await get_channel_formatted_link(category_obj.tg_id)}')


@Client.on_callback_query(filters.regex(
    r'^/c_\d+/:add/$') & custom_filters.admin_only)
async def add_source(client: Client, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    text = ('–û–ö. –¢—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫.\n\n'
            '**–í–≤–µ–¥–∏ –ø—É–±–ª–∏—á–Ω—ã–π username –∫–∞–Ω–∞–ª–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ '
            '–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞:**')

    await callback_query.answer()
    await callback_query.message.reply(text)
    input_wait_manager.add(
        callback_query.message.chat.id, add_source_waiting_input, client,
        callback_query)


async def add_source_waiting_input(
        client: Client, message: Message, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    category_id = int(path.get_value('c'))

    input_text = re.sub('https://t.me/', '', message.text)

    new_message = await message.reply_text('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞‚Ä¶')

    async def edit_text(text):
        await new_message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                buttons.get_fixed(path, back_title='–ù–∞–∑–∞–¥')),
            disable_web_page_preview=True)

    try:
        if message.forward_date:
            chat = message.forward_from_chat
        else:
            chat = await user.get_chat(input_text)
    except RPCError as e:
        await edit_text(f'‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n{e}')
        return

    if chat.type != ChatType.CHANNEL:
        await edit_text('‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª')
        return

    try:
        await user.join_chat(chat.username if chat.username else chat.id)
    except RPCError as e:
        await edit_text(f'‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\n\n'
                        f'{e}')
        return

    try:
        Source.create(tg_id=chat.id, title=chat.title,
                      category=category_id)
        Source.clear_actual_cache()
    except peewee.IntegrityError:
        await edit_text(f'‚ùóÔ∏è–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
        return

    category_obj: Category = Category.get(id=category_id)
    success_text = (f'‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ [{chat.title}](https://{chat.username}.t.me) '
                    f'–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '
                    f'{await get_channel_formatted_link(category_obj.tg_id)}')
    await edit_text(success_text)

    callback_query.data = path.get_prev()
    await list_source(client, callback_query)

    await send_message_to_admins(client, callback_query, success_text)


@Client.on_callback_query(filters.regex(
    r's_\d+/:delete/') & custom_filters.admin_only)
async def delete_source(client: Client, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    source_obj: Source = Source.get(id=int(path.get_value('s')))
    if path.with_confirmation:
        source_obj.delete_instance()
        Source.clear_actual_cache()

        callback_query.data = path.get_prev(3)
        await callback_query.answer('–ò—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª–µ–Ω')
        await list_source(client, callback_query)

        await send_message_to_admins(
            client, callback_query,
            f'‚ùå –£–¥–∞–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ **{await get_channel_formatted_link(source_obj.tg_id)}**')
        return

    await callback_query.answer()
    await callback_query.message.edit_text(
        f'–ò—Å—Ç–æ—á–Ω–∏–∫: **{await get_channel_formatted_link(source_obj.tg_id)}**\n\n'
        '–¢—ã **—É–¥–∞–ª—è–µ—à—å** –∏—Å—Ç–æ—á–Ω–∏–∫!',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
            '‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ',
            callback_data=f'{path}/'
        ), ]] + buttons.get_fixed(path)),
        disable_web_page_preview=True
    )
