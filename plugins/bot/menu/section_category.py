import re

import peewee
from pyrogram import Client, filters
from pyrogram.enums import ChatType
from pyrogram.errors import exceptions
from pyrogram.types import (CallbackQuery, InlineKeyboardButton,
                            InlineKeyboardMarkup, Message)

from initialization import logger
from models import Source, Category
from plugins.bot.menu import custom_filters
from plugins.bot.menu.helpers import buttons
from plugins.bot.menu.helpers.path import Path
from plugins.bot.menu.managers.input_wait import input_wait_manager
from plugins.bot.menu.section_source import list_source


@Client.on_callback_query(filters.regex(
    r'^/$|s_\d+/:edit/$'))
async def list_category(_, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    action = path.action

    text = '**–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤**'
    if action == 'edit':
        source_id = int(path.get_value('s'))
        source_obj = Source.get(id=source_id)
        text = (f'–ò—Å—Ç–æ—á–Ω–∏–∫: **{source_obj}**\n\n'
                f'–¢—ã **–º–µ–Ω—è–µ—à—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é** —É –∏—Å—Ç–æ—á–Ω–∏–∫–∞.\n'
                f'–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')

    inline_keyboard = []

    button_show_all_title = ''
    if action != 'edit':
        button_show_all_title = f'üìö –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏'
        if custom_filters.is_admin(None, None, callback_query):
            inline_keyboard.append([InlineKeyboardButton(
                '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                callback_data=path.add_action('add')
            ), ])

    query = (Category
             .select(Category.id,
                     Category.title,
                     peewee.fn.Count(Source.id).alias('count'))
             .join(Source, peewee.JOIN.LEFT_OUTER)
             .group_by(Category.id))

    inline_keyboard += buttons.get_list_model(
        data={f'{item.id}': (item.title, item.count) for item in query},
        path=path,
        prefix_path='c',
        button_show_all_title=button_show_all_title,
    )

    if action != 'edit':
        inline_keyboard.append([InlineKeyboardButton(
            f'üîò –û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã',
            callback_data=path.add_value('s', 0)
        )])

    if action == 'edit':
        inline_keyboard += buttons.get_fixed(path)

    await callback_query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard)
    )


@Client.on_callback_query(filters.regex(
    r'^/:add/$|^/c_\d+/:edit/$') & custom_filters.admin_only)
async def add_edit_category(client: Client, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    chat_id = callback_query.message.chat.id

    text = '–û–ö. –¢—ã –º–µ–Ω—è–µ—à—å –∫–∞–Ω–∞–ª —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n'
    if path.action == 'add':
        text = '–û–ö. –¢—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n'
    text += '**–í–≤–µ–¥–∏ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ:**'

    await client.send_message(chat_id, text)
    input_wait_manager.add(
        chat_id, add_edit_category_waiting_input, client, callback_query)


async def add_edit_category_waiting_input(
        client: Client, message: Message, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    input_text = re.sub('https://t.me/', '', message.text)

    path = Path(callback_query.data)
    reply_markup_fix_buttons = InlineKeyboardMarkup(
        buttons.get_fixed(path, back_title='–ù–∞–∑–∞–¥'))

    try:
        channel = await client.get_chat(input_text)
    except (exceptions.BadRequest, exceptions.NotAcceptable) as err:
        await message.reply_text(
            f'‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n{err}',
            reply_markup=reply_markup_fix_buttons)
        return

    if channel.type != ChatType.CHANNEL:
        await message.reply_text(
            '‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª',
            reply_markup=reply_markup_fix_buttons)
        return

    try:
        member = await channel.get_member(client.me.id)
    except exceptions.bad_request_400.UserNotParticipant:
        await message.reply_text(
            '‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
            reply_markup=reply_markup_fix_buttons)
        return

    if not member.privileges.can_post_messages:
        await message.reply_text(
            '‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ',
            reply_markup=reply_markup_fix_buttons)
        return

    try:
        if path.action == 'add':
            Category.create(tg_id=channel.id, title=channel.title)
            success_text = f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{channel.title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞'

        else:
            category_id = int(path.get_value('c'))
            category = Category.get(id=category_id)
            category.tg_id = channel.id
            old_title = category.title
            category.title = channel.title
            category.save()
            success_text = (f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{old_title}¬ª –∏–∑–º–µ–Ω–µ–Ω–∞ '
                            f'–Ω–∞ ¬´{channel.title}¬ª')

    except peewee.IntegrityError:
        await message.reply_text(
            f'‚ùóÔ∏è–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
            reply_markup=reply_markup_fix_buttons)
        return

    await message.reply_text(
        success_text,
        reply_markup=reply_markup_fix_buttons)

    callback_query.data = path.get_prev()
    if path.action == 'add':
        await list_category(client, callback_query)
        return
    await list_source(client, callback_query)


@Client.on_callback_query(filters.regex(
    r'c_\d+/:delete/') & custom_filters.admin_only)
async def delete_category(_, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    category_id = int(path.get_value('c'))

    if path.with_confirmation:
        q = (Category
             .delete()
             .where(Category.id == category_id))
        q.execute()

        callback_query.data = path.get_prev(3)
        await list_category(_, callback_query)
        return

    category_obj = Category.get(id=category_id)
    text = f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{category_obj.title}**\n\n'
    text += '–¢—ã **—É–¥–∞–ª—è–µ—à—å** –∫–∞—Ç–µ–≥–æ—Ä–∏—é!'

    inline_keyboard = [[InlineKeyboardButton(
        '‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ',
        callback_data=f'{path}/'
    ), ]]
    inline_keyboard += buttons.get_fixed(path)

    await callback_query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard)
    )
