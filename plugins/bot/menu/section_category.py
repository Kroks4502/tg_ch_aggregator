import re

import peewee
from pyrogram import Client, filters
from pyrogram.enums import ChatType
from pyrogram.errors import exceptions
from pyrogram.types import (CallbackQuery, InlineKeyboardButton,
                            InlineKeyboardMarkup, Message)

from initialization import user
from log import logger
from models import Source, Category, Filter
from plugins.bot.menu import custom_filters
from plugins.bot.menu.helpers import buttons
from plugins.bot.menu.helpers.checks import is_admin
from plugins.bot.menu.helpers.path import Path
from plugins.bot.menu.helpers.senders import send_message_to_main_user
from plugins.bot.menu.managers.input_wait import input_wait_manager
from plugins.bot.menu.section_source import list_source


def list_category_buttons(
        path: Path, button_show_all_title='') -> list[list]:
    query = (Category
             .select(Category.id,
                     Category.title,
                     peewee.fn.Count(Source.id).alias('count'))
             .join(Source, peewee.JOIN.LEFT_OUTER)
             .group_by(Category.id))
    return buttons.get_list_model(
        data={f'{item.id}': (item.title, item.count) for item in query},
        path=path,
        prefix_path='c',
        button_show_all_title=button_show_all_title,
    )


def main_menu(data: Message | CallbackQuery) -> (str, list[list]):
    path = Path('/')

    text = '**–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤**'

    inline_keyboard = []
    if is_admin(data.from_user.id):
        inline_keyboard.append([InlineKeyboardButton(
            '‚ûï',
            callback_data=path.add_action('add')
        ), InlineKeyboardButton(
            '‚öô',
            callback_data='/o/'
        ), ])
    inline_keyboard += list_category_buttons(path, f'üìö –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏')
    inline_keyboard.append([InlineKeyboardButton(
        f'üîò –û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã',
        callback_data=path.add_value('s', 0)
    )])

    return text, inline_keyboard


@Client.on_callback_query(filters.regex(
    r'^/$'))
async def set_main_menu(_, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    text, inline_keyboard = main_menu(callback_query)
    await callback_query.answer()
    await callback_query.message.edit_text(
        text, reply_markup=InlineKeyboardMarkup(inline_keyboard))


@Client.on_callback_query(filters.regex(
    r's_\d+/:edit/$') & custom_filters.admin_only)
async def choice_source_category(client: Client, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    source_obj: Source = Source.get(id=int(path.get_value('s')))
    text = (f'–ò—Å—Ç–æ—á–Ω–∏–∫: {await source_obj.get_formatted_link()}\n\n'
            f'–¢—ã **–º–µ–Ω—è–µ—à—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é** —É –∏—Å—Ç–æ—á–Ω–∏–∫–∞.\n'
            f'–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')

    inline_keyboard = list_category_buttons(path) + buttons.get_fixed(path)
    await callback_query.answer()
    await callback_query.message.edit_text(
        text, reply_markup=InlineKeyboardMarkup(inline_keyboard),
        disable_web_page_preview=True)


@Client.on_callback_query(filters.regex(
    r'^/:add/$|^/c_\d+/:edit/$') & custom_filters.admin_only)
async def add_edit_category(client: Client, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    text = '–û–ö. –¢—ã –º–µ–Ω—è–µ—à—å –∫–∞–Ω–∞–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, '
    if Path(callback_query.data).action == 'add':
        text = '–û–ö. –¢—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∫–∞–Ω–∞–ª–æ–º, '
    text += ('–≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. '
             '–≠—Ç–æ—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ '
             '—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏.\n\n'
             '**–í–≤–µ–¥–∏ ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:**')

    await callback_query.answer()
    await callback_query.message.reply(text)

    input_wait_manager.add(
        callback_query.message.chat.id, add_edit_category_waiting_input,
        client, callback_query)


async def add_edit_category_waiting_input(
        client: Client, message: Message, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    input_text = re.sub('https://t.me/', '', message.text)
    path = Path(callback_query.data)

    async def reply(text):
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                buttons.get_fixed(path, back_title='–ù–∞–∑–∞–¥')),
            disable_web_page_preview=True)

    try:
        chat = await user.get_chat(input_text)
    except (exceptions.BadRequest, exceptions.NotAcceptable) as err:
        await reply(f'‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n{err}')
        return

    if chat.type != ChatType.CHANNEL:
        await reply('‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª')
        return

    try:
        member = await chat.get_member(client.me.id)
        if not member.privileges.can_post_messages:
            await reply('‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ')
            return
    except exceptions.bad_request_400.UserNotParticipant:
        await reply('‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞')
        return

    try:
        await user.join_chat(input_text)
    except Exception as err:
        await reply(f'‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\n\n'
                    f'{err}')
        return

    try:
        if path.action == 'add':
            category_obj: Category = Category.create(
                tg_id=chat.id, title=chat.title)
            success_text = (f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '
                            f'**{await category_obj.get_formatted_link()}** '
                            f'–¥–æ–±–∞–≤–ª–µ–Ω–∞')
        else:
            category_id = int(path.get_value('c'))
            q = (Category
                 .update({Category.tg_id: chat.id,
                          Category.title: chat.title})
                 .where(Category.id == category_id))
            q.execute()
            success_text = (f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} '
                            f'–∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ **{chat.title}**')
        Category.clear_actual_cache()
    except peewee.IntegrityError:
        await reply('‚ùóÔ∏è–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
        return

    await reply(success_text)

    await send_message_to_main_user(client, callback_query, success_text)

    callback_query.data = path.get_prev()
    if path.action == 'add':
        await set_main_menu(client, callback_query)
        return
    await list_source(client, callback_query)


@Client.on_callback_query(filters.regex(
    r'c_\d+/:delete/') & custom_filters.admin_only)
async def delete_category(client: Client, callback_query: CallbackQuery):
    logger.debug(callback_query.data)

    path = Path(callback_query.data)
    category_obj: Category = Category.get(id=int(path.get_value('c')))
    if path.with_confirmation:
        category_obj.delete_instance()
        Category.clear_actual_cache()
        Source.clear_actual_cache()
        Filter.clear_actual_cache()

        callback_query.data = '/'
        await callback_query.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞')
        await set_main_menu(client, callback_query)

        await send_message_to_main_user(
            client, callback_query,
            f'–£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è **{await category_obj.get_formatted_link()}**')
        return

    await callback_query.answer()
    await callback_query.message.edit_text(
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{await category_obj.get_formatted_link()}**\n\n'
        '–¢—ã **—É–¥–∞–ª—è–µ—à—å** –∫–∞—Ç–µ–≥–æ—Ä–∏—é!',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
            '‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ',
            callback_data=f'{path}/'
        ), ]] + buttons.get_fixed(path)),
        disable_web_page_preview=True
    )
