from dataclasses import dataclass

from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from filter_types import FILTER_TYPES_BY_ID
from models import Admin, Category, Filter, Source
from plugins.bot.constants import MAX_LENGTH_BUTTON_TEXT
from plugins.bot.utils.links import get_channel_formatted_link, get_user_formatted_link
from plugins.bot.utils.path import Path


class Menu:
    path: Path

    def __init__(self, path: str, *, back_title: str = '–ù–∞–∑–∞–¥', back_step: int = 1):
        self.inline_keyboard = []

        self.path = Path(path)

        if path == '/':
            self.footer_buttons_row = None
            return

        self.footer_buttons_row = [
            InlineKeyboardButton('üóÇ –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='/')
        ]
        prev_path = self.path.get_prev(back_step)
        if prev_path != '/':
            self.footer_buttons_row.append(
                InlineKeyboardButton(f'üîô {back_title}', callback_data=prev_path)
            )

    async def get_text(  # noqa: C901
        self,
        *,
        category_obj: Category = None,
        source_obj: Source = None,
        filter_obj: Filter = None,
        filter_type_id: str = None,
        cleanup_pattern: str = None,
        admin_obj: Admin = None,
        start_text: str = None,
        last_text: str = None,
    ):
        if filter_obj:
            source_obj = filter_obj.source
            filter_type_id = filter_obj.type

        if source_obj:
            category_obj = source_obj.category

        breadcrumbs = []

        if category_obj:
            link = await get_channel_formatted_link(category_obj.tg_id)
            breadcrumbs.append(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{link}**')

        if source_obj:
            link = await get_channel_formatted_link(source_obj.tg_id)
            breadcrumbs.append(f'–ò—Å—Ç–æ—á–Ω–∏–∫: **{link}**')

        if filter_type_id:
            if not source_obj:
                breadcrumbs.append('**–û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã**')
            filter_type_text = FILTER_TYPES_BY_ID.get(filter_type_id)
            breadcrumbs.append(f'–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞: **{filter_type_text}**')

        if filter_obj:
            breadcrumbs.append(f'–ü–∞—Ç—Ç–µ—Ä–Ω: `{filter_obj.pattern}`')

        if cleanup_pattern:
            if not source_obj:
                breadcrumbs.append('**–û–±—â–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞**')
            breadcrumbs.append(f'–ü–∞—Ç—Ç–µ—Ä–Ω –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: `{cleanup_pattern}`')

        if admin_obj:
            link = await get_user_formatted_link(admin_obj.tg_id)
            breadcrumbs.append(f'**{link}**')

        text = ''
        if start_text:
            text += start_text

        if breadcrumbs:
            text += '\n\n' + '\n'.join(breadcrumbs)

        if last_text:
            text += f'\n\n{last_text}'

        if text:
            return text.strip('\n')

        return '<–ø—É—Å—Ç–æ>'

    def add_row_button(self, text: str, path: str) -> None:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏.

        :param text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏.
        :param path: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å.
        """
        self.inline_keyboard.append(
            [
                InlineKeyboardButton(text=text, callback_data=self.path.join(path)),
            ]
        )

    def add_row_many_buttons(self, *buttons_args: tuple[str, str]) -> None:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫.

        :param buttons_args: –ö–æ—Ä—Ç–µ–∂, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äì —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –≤—Ç–æ—Ä–æ–π ‚Äì –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å.
        """
        self.inline_keyboard.append(
            [InlineKeyboardButton(b[0], self.path.join(b[1])) for b in buttons_args]
        )

    def add_rows_from_data(
        self,
        data: list['ButtonData'],
        postfix: str = '',
    ) -> None:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö.

        :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∏.
        :param postfix: –ü–æ—Å—Ç—Ñ–∏–∫—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü –ø—É—Ç–∏.
        :return: –ö–Ω–æ–ø–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö.
        """
        row_buttons = []

        for item in data:
            if len(row_buttons) == 2:
                self.inline_keyboard.append(row_buttons)
                row_buttons = []

            row_buttons.append(
                InlineKeyboardButton(
                    item.text,
                    callback_data=self.path.join(item.path) + postfix,
                )
            )
        self.inline_keyboard.append(row_buttons)

    @property
    def reply_markup(self):
        if self.footer_buttons_row:
            return InlineKeyboardMarkup(
                self.inline_keyboard + [self.footer_buttons_row]
            )

        if len(self.inline_keyboard) == 0:
            return None

        return InlineKeyboardMarkup(self.inline_keyboard)

    def __str__(self):
        return str(self.inline_keyboard)


@dataclass
class ButtonData:
    """
    - title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).
    - path: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ –æ–±—ä–µ–∫—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).
    - amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤.
    """

    title: str
    path: str | int
    amount: str | int = None

    def __post_init__(self):
        self.path = str(self.path)

    @property
    def text(self):
        if len(self.title) > MAX_LENGTH_BUTTON_TEXT:
            self.title = self.title[:MAX_LENGTH_BUTTON_TEXT].rstrip(' ') + '‚Ä¶'

        if self.amount:
            self.title = f'{self.title} ({self.amount})'

        return self.title
